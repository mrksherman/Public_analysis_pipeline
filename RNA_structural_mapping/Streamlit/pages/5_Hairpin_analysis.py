#This script aims to find hairping regions with equal opening and closing basepairs on either side of an
#unpaired region and return the RNA label, hairpin start and end positions, and the dot-bracket structure
#for the region

import re
import streamlit as st
import pandas as pd

title='Hairpin Locator'
st.set_page_config(page_title=title, page_icon="ðŸ“ˆ", layout='wide')

st.markdown(f"# {title}")
st.sidebar.header(title)
st.markdown(
    """
    #### This tool helps to identify hairpin regions based on given dot bracket structure
    """
)

#input field
st.text_input('(Optional) Please enter your sequence name',key="name")
st.text_input("Please enter your dot-bracket structure to analyze", key="input")
st.text_input("(Optional) Please enter your sequence to analyze", key="sequence")


def rnasearch(rna_sequence="", name="", sequence=""):
    matchlist=[]
    matches = re.finditer(r'\(+\.+\)+', rna_sequence)

    for match in matches:
        #calculate the absolute difference between opening and closing pairs
        difference=abs(match.group().count("(")-match.group().count(")"))
        
        #depending on whether one side of the hairpin is longer, adjust the start and end positions
        if match.group().count("(")>match.group().count(")"):
            match_startpos= match.start()+difference
            matchlist.append((name, match_startpos+1, match.end(),rna_sequence[match_startpos:match.end()], sequence[match_startpos:match.end()]))
        elif match.group().count("(")<match.group().count(")"):
            match_endpos= match.end()-difference
            matchlist.append((name,match.start()+1,match_endpos, rna_sequence[match.start():match_endpos], sequence[match.start():match_endpos]))
        else:
            matchlist.append((name, match.start()+1, match.end(), rna_sequence[match.start():match.end()], sequence[match.start():match.end()]))
    
    #print out the hairpin regions
    df = pd.DataFrame(matchlist, columns = ['RNA', 'Start', 'End', 'Match', 'Sequence'])
    st.dataframe(df, use_container_width=True)
    if st.button('save dataframe'):
        open(f'{st.session_state.name}_hairpins.csv', 'w').write(df.to_csv())
#    for item in matchlist:
#        st.write(name,"\t",item[1],"\t", item[2], "\t", item[0])


#if st.session_state.input:
#    if st.session_state.name:
        
#    else:
#        rnasearch(str(st.session_state.input), "Example")

rnasearch(str(st.session_state.input), str(st.session_state.name), str(st.session_state.sequence))



st.markdown("#### Example Sequences")
#have expanding windows with dot bracket structures
with st.expander("E. coli 16S"):
    st.write("""
    ........((((.........))))(((((.((((((.(((((((((....(((.(((..(((..(((((..((((((((((....))))))).))))).))))))......(((......((((((((.((...(((((((.(((((...(((((((....)))))))....))))).(...(((....))).)..((((((..((....)))))))).)))))))..))))))))))(((..(.(((..((((((((.......))))))))))).....))))..((((((((....))))...))))))).((((((..........)))))).((((....))))...)))))))......(.(((...(((((....))))).)))).)).))))))..((((......((((....)))).....))))((((((((((((.(....((((((((.......)))))))).....)..))))))))))))..(((((......(((((((...((....)).....)))))))))))).)))))))))).)....(...(((.......((((...(((.(((((((.(((((((((((.....((((((.....))))))...)))))))))..)))))))))..((((((((((.((((((((((((((((((((((.(((......)))....))))))))))))))....(..((....)))))))))))))))).))))..))))...)))).(..(((((((...(...((((.........))))...))))))))..).......(((((((.((((((((((((.....))))))))))))..(((....)))...))))))).))))(((((.((.((((....)))))))))))........(((((.(((((((.((..((((((((((((((((((...)(((........))).........(((((((.....((((((((..(((((((....))))))).((((....))))))))).)))(((.((((..(((((((((.(.(((((((((....)))..((((......))))..)))))).....((((((((((((.((((..(((.....)))))))..)))))))..(..(((((.....))))).....).)))))...))))).)))...)))))))))...)))))))...)).)))))))))((..(((((((((..((((..((((.(((....))).))))....))))..)))))))))....).((((((((((((........))))))))))))..).)))))).(.((((((((((.......)))))))))))...))...)))))))))).))....((.((((.((((((((((((((((((((((....((((((.((((..((....)).))))))))))...))))))))))))))))))))))..))))..))....((((((((((....)))))))))).........................
    """)
with st.expander("E. coli 23S"):
    st.write("""

    """)